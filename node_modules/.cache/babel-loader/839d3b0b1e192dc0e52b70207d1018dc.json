{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\n\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n\n  var elementType = parameters.elementType,\n      externalSlotProps = parameters.externalSlotProps,\n      ownerState = parameters.ownerState,\n      rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n\n  var resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n  var merged = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  var props = appendOwnerState(elementType, _extends({}, merged.props, {\n    ref: useForkRef(merged.internalRef, useForkRef(resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref))\n  }), ownerState);\n  return props;\n}","map":{"version":3,"sources":["C:/Users/Owner/Documents/react-projects/styled components/node_modules/@mui/base/utils/useSlotProps.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","unstable_useForkRef","useForkRef","appendOwnerState","mergeSlotProps","resolveComponentProps","useSlotProps","parameters","_parameters$additiona","elementType","externalSlotProps","ownerState","rest","resolvedComponentsProps","merged","props","ref","internalRef","additionalProps"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,IAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,mBAAhB,EAAqC,YAArC,CAAlB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,QAAkD,YAAlD;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAC/C,MAAIC,qBAAJ;;AAEA,MACEC,WADF,GAIIF,UAJJ,CACEE,WADF;AAAA,MAEEC,iBAFF,GAIIH,UAJJ,CAEEG,iBAFF;AAAA,MAGEC,UAHF,GAIIJ,UAJJ,CAGEI,UAHF;AAAA,MAKMC,IALN,GAKab,6BAA6B,CAACQ,UAAD,EAAaP,SAAb,CAL1C;;AAOA,MAAMa,uBAAuB,GAAGR,qBAAqB,CAACK,iBAAD,EAAoBC,UAApB,CAArD;AACA,MAAMG,MAAM,GAAGV,cAAc,CAACN,QAAQ,CAAC,EAAD,EAAKc,IAAL,EAAW;AAC/CF,IAAAA,iBAAiB,EAAEG;AAD4B,GAAX,CAAT,CAA7B;AAGA,MAAME,KAAK,GAAGZ,gBAAgB,CAACM,WAAD,EAAcX,QAAQ,CAAC,EAAD,EAAKgB,MAAM,CAACC,KAAZ,EAAmB;AACrEC,IAAAA,GAAG,EAAEd,UAAU,CAACY,MAAM,CAACG,WAAR,EAAqBf,UAAU,CAACW,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACG,GAApE,EAAyE,CAACR,qBAAqB,GAAGD,UAAU,CAACW,eAApC,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwEV,qBAAqB,CAACQ,GAAvK,CAA/B;AADsD,GAAnB,CAAtB,EAE1BL,UAF0B,CAA9B;AAGA,SAAOI,KAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n\n/**\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState\n  } = parameters,\n        rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n\n  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n  const merged = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const props = appendOwnerState(elementType, _extends({}, merged.props, {\n    ref: useForkRef(merged.internalRef, useForkRef(resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref))\n  }), ownerState);\n  return props;\n}"]},"metadata":{},"sourceType":"module"}